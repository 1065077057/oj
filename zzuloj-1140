/*郑州轻工业学院 1130 杨辉三角*/

/*
Description
还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形： 
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1

Input
输入只包含一个正整数n（1 <= n <= 30），表示将要输出的杨辉三角的层数。

Output
输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开。

Sample Input
4

Sample Output
1
1 1
1 2 1
1 3 3 1
*/

/*
题解：
	与之前的杨辉三角不同。之前写杨辉三角没有算法（或者说不算算法），只是
简单的找规律。实际上杨辉三角上除了1以外的数字都是根据行列数值有算法可以
直接计算得到值。即：
	s = (i-j)*s/i-j 	s初始值为1 i为行 j为列-1
用 C 与 Java 各实现一次
*/

/*C AC 0ms*/
#include <stdio.h>
#include <stdlib.h>
int main(){
	int s=1;
	int i,j,h;
	scanf("%d",&h);
	printf("1\n");
	for(i=2;i<=h;s=1,i++){
		printf("1 ");
		for(j=1;j<i-1;j++){
			printf("%d ",(s=(i-j)*s/j));
		} 
		printf("1\n");
	}
}

/*Java AC 156ms*/
import java.util.Scanner;

public class Main{
	public static void main(String[] args){
		Scanner input = new Scanner(System.in);
		
		int n = input.nextInt();
		int i;
		int j;
		int s = 1;
		System.out.println(1);
		for(i = 2;i <= n;s = 1,i++){
			System.out.printf("%d ",s);
			for(j = 1;j < i-1;j++){
				System.out.printf("%d ",(s = (i-j)*s/j));
			}
			System.out.println(1);
		}
	}
}
